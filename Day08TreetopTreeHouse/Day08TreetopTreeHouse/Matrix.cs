using Newtonsoft.Json;

namespace Day08TreetopTreeHouse;

/// <summary>
/// Generic mxn matrix.
/// This code has been generated by <see href="https://chat.openai.com/">OpenAI ChatGPT</see>.
/// Only a minor change was applied in the documentation of <see cref="FromList"/> after the method had been
/// recovered from an earlier session with ChatGPT.
/// </summary>
/// <typeparam name="T">Type of the objects stored in the matrix</typeparam>
public class Matrix<T>
{
    private T[,] _matrix;

    public Matrix(int rows, int cols)
    {
        _matrix = new T[rows, cols];
    }

    public T GetValue(int row, int col)
    {
        return _matrix[row, col];
    }

    public void SetValue(int row, int col, T value)
    {
        _matrix[row, col] = value;
    }

    public int Rows
    {
        get { return _matrix.GetLength(0); }
    }

    public int Cols
    {
        get { return _matrix.GetLength(1); }
    }

    /// <summary>
    /// Creates a matrix from a list of strings.
    /// Each string in the list represents a row of the matrix.
    /// Each character in the string represents a column of the matrix.
    /// </summary>
    /// <param name="list">A list of strings with same length</param>
    /// <returns>A matrix created from the input list</returns>
    /// <returns>0x0 matrix if input list is empty</returns>
    public static Matrix<int> FromList(List<string> list)
    {
        if (list.Count == 0)
        {
            return new Matrix<int>(0, 0);
        }

        int rows = list.Count;
        int cols = list[0].Length;
        if (list.Any(x => x.Length != cols))
        {
            throw new ArgumentException("All strings in the list must have the same length");
        }

        Matrix<int> matrix = new Matrix<int>(rows, cols);
        for (int row = 0; row < rows; row++)
        {
            for (int col = 0; col < cols; col++)
            {
                matrix.SetValue(row,col, int.Parse(list[row][col].ToString()));
            }
        }

        return matrix;
    }
    
    public override string ToString()
    {
        return $"{Rows}x{Cols} {JsonConvert.SerializeObject(_matrix)}";
    }
    
    public void SetBorderValues(T value)
    {
        int rows = _matrix.GetLength(0);
        int cols = _matrix.GetLength(1);

        for (int i = 0; i < rows; i++)
        {
            _matrix[i, 0] = value;
            _matrix[i, cols - 1] = value;
        }

        for (int i = 0; i < cols; i++)
        {
            _matrix[0, i] = value;
            _matrix[rows - 1, i] = value;
        }
    }

    /// <summary>
    /// Returns an enumerable sequence that contains all elements in the matrix.
    /// </summary>
    /// <returns>An enumerable sequence of elements in the matrix</returns>
    public IEnumerable<T> ToEnumerable()
    {
        for (int row = 0; row < Rows; row++)
        {
            for (int col = 0; col < Cols; col++)
            {
                yield return _matrix[row, col];
            }
        }
    }
    
    public IEnumerable<IEnumerable<T>> EnumerateByColumn()
    {
        for (var colIndex = 0; colIndex < Cols; colIndex++)
        {
            var column = new List<T>();
            for (var rowIndex = 0; rowIndex < Rows; rowIndex++)
            {
                column.Add(_matrix[rowIndex, colIndex]);
            }

            yield return column;
        }
    }

    public IEnumerable<IEnumerable<T>> EnumerateByRow()
    {
        for (var rowIndex = 0; rowIndex < Rows; rowIndex++)
        {
            var row = new List<T>();
            for (var colIndex = 0; colIndex < Cols; colIndex++)
            {
                row.Add(_matrix[rowIndex, colIndex]);
            }

            yield return row;
        }
    }
}
