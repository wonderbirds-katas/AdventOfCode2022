using Newtonsoft.Json;

namespace Day08TreetopTreeHouse;

/// <summary>
/// Generic mxn matrix.
/// This code was initially generated by <see href="https://chat.openai.com/">OpenAI ChatGPT</see>.
/// Then it was cleaned up.
/// </summary>
/// <typeparam name="T">Type of the objects stored in the matrix</typeparam>
public class Matrix<T>
{
    private readonly T[,] _matrix;

    public Matrix(int rows, int cols)
    {
        _matrix = new T[rows, cols];
    }

    public T GetValue(int row, int col)
    {
        return _matrix[row, col];
    }

    public void SetValue(int row, int col, T value)
    {
        _matrix[row, col] = value;
    }

    public int Rows => _matrix.GetLength(0);

    public int Cols => _matrix.GetLength(1);

    /// <summary>
    /// Creates a matrix from a list of strings.
    /// Each string in the list represents a row of the matrix.
    /// Each character in the string represents a column of the matrix.
    /// </summary>
    /// <param name="list">A list of strings with same length</param>
    /// <param name="map">Map a character to its corresponding value in the matrix</param>
    /// <returns>A matrix created from the input list</returns>
    /// <returns>0x0 matrix if input list is empty</returns>
    public static Matrix<T> FromList(List<string> list, Func<string, T> map)
    {
        if (list.Count == 0)
        {
            return new Matrix<T>(0, 0);
        }

        var rows = list.Count;
        var cols = list[0].Length;
        if (list.Any(x => x.Length != cols))
        {
            throw new ArgumentException("All strings in the list must have the same length");
        }

        var matrix = new Matrix<T>(rows, cols);
        for (var row = 0; row < rows; row++)
        {
            for (var col = 0; col < cols; col++)
            {
                matrix.SetValue(row, col, map(list[row][col].ToString()));
            }
        }

        return matrix;
    }

    /// <summary>
    /// Creates a matrix from a list of strings.
    /// Each string in the list represents a row of the matrix.
    /// Each character in the string represents a column of the matrix.
    /// </summary>
    /// <param name="list">A list of strings with same length</param>
    /// <returns>A matrix created from the input list</returns>
    /// <returns>0x0 matrix if input list is empty</returns>
    public static Matrix<int> FromList(List<string> list) => Matrix<int>.FromList(list, int.Parse);

    public override string ToString() => $"{Rows}x{Cols} {JsonConvert.SerializeObject(_matrix)}";

    public void SetBorderValues(T value) => TransformBorderValues(_ => value);

    public void TransformBorderValues(Func<T, T> transform)
    {
        var rows = _matrix.GetLength(0);
        var cols = _matrix.GetLength(1);

        for (var i = 0; i < rows; i++)
        {
            _matrix[i, 0] = transform(_matrix[i, 0]);
            _matrix[i, cols - 1] = transform(_matrix[i, cols - 1]);
        }

        for (var i = 1; i < cols - 1; i++)
        {
            _matrix[0, i] = transform(_matrix[0, i]);
            _matrix[rows - 1, i] = transform(_matrix[rows - 1, i]);
        }
    }

    /// <summary>
    /// Returns an enumerable sequence that contains all elements in the matrix.
    /// </summary>
    /// <returns>An enumerable sequence of elements in the matrix</returns>
    public IEnumerable<T> ToEnumerable()
    {
        for (var row = 0; row < Rows; row++)
        {
            for (var col = 0; col < Cols; col++)
            {
                yield return _matrix[row, col];
            }
        }
    }

    public IEnumerable<IEnumerable<T>> EnumerateByColumn()
    {
        for (var colIndex = 0; colIndex < Cols; colIndex++)
        {
            var column = new List<T>();
            for (var rowIndex = 0; rowIndex < Rows; rowIndex++)
            {
                column.Add(_matrix[rowIndex, colIndex]);
            }

            yield return column;
        }
    }

    public IEnumerable<IEnumerable<T>> EnumerateByRow()
    {
        for (var rowIndex = 0; rowIndex < Rows; rowIndex++)
        {
            var row = new List<T>();
            for (var colIndex = 0; colIndex < Cols; colIndex++)
            {
                row.Add(_matrix[rowIndex, colIndex]);
            }

            yield return row;
        }
    }

    public void PrintColorized(Func<T, bool> isGreen, Func<T, string> toString)
    {
        const string green = "\x1b[32m";
        const string red = "\x1b[31m";
        const string reset = "\x1b[0m";

        for (var row = 0; row < Rows; row++)
        {
            for (var col = 0; col < Cols; col++)
            {
                var value = GetValue(row, col);
                var color = isGreen(value) ? green : red;
                Console.Write($"{color}{toString(value)}");
            }
            Console.WriteLine();
        }
        Console.WriteLine(reset);
    }

    protected bool Equals(Matrix<T> other)
    {
        for (var row = 0; row < Rows; row++)
        {
            for (var col = 0; col < Cols; col++)
            {
                if (!_matrix[row, col].Equals(other._matrix[row, col]))
                {
                    return false;
                }
            }
        }

        return true;
    }

    public override bool Equals(object? obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != this.GetType()) return false;
        return Equals((Matrix<T>) obj);
    }

    public override int GetHashCode()
    {
        throw new NotImplementedException();
    }

    public static bool operator ==(Matrix<T>? left, Matrix<T>? right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(Matrix<T>? left, Matrix<T>? right)
    {
        return !Equals(left, right);
    }
}
